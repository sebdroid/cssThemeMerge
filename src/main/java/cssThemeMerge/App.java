package cssThemeMerge;

import java.io.File;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.concurrent.Callable;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

import com.helger.css.ECSSVersion;
import com.helger.css.decl.CascadingStyleSheet;
import com.helger.css.reader.CSSReader;
import com.helger.commons.io.file.SimpleFileIO;
import com.helger.css.writer.CSSWriter;
import com.helger.css.writer.CSSWriterSettings;
import com.helger.commons.collection.impl.ICommonsList;
import com.helger.css.decl.CSSImportRule;
import com.helger.css.decl.CSSNamespaceRule;
import com.helger.css.decl.ICSSTopLevelRule;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("unchecked")
@Command(name = "cssThemeMerge", mixinStandardHelpOptions = true, version = "cssThemeMerge 1.0", description = "Removes redundant css to allow theme merging")
public class App implements Callable<Integer> {

    Logger log = LoggerFactory.getLogger(App.class);

    @Option(names = { "-d", "--default" }, description = "The default theme")
    private String defaultThemeFile = "default.css";

    @Option(names = { "-a", "--alternative" }, description = "The alternative theme")
    private String alternativeThemeFile = "alternative.css";

    @Option(names = { "-o", "--output" }, description = "The output file")
    private String outputThemeFile = "out.css";

    @Override
    public Integer call() throws Exception {
        log.info("Attempting CSS parse");
        File defaultTheme = new File(defaultThemeFile);
        File alternativeTheme = new File(alternativeThemeFile);
        File outputFile = new File(outputThemeFile);

        CascadingStyleSheet defaultCSS = null;
        CascadingStyleSheet alternativeCSS = null;

        if (defaultTheme.exists()) {
            defaultCSS = CSSReader.readFromFile(defaultTheme, StandardCharsets.UTF_8, ECSSVersion.CSS30);
        } else {
            log.error("File not found");
            return 2;
        }
        if (alternativeTheme.exists()) {
            alternativeCSS = CSSReader.readFromFile(alternativeTheme, StandardCharsets.UTF_8, ECSSVersion.CSS30);
        } else {
            log.error("File not found");
            return 2;
        }

        if (defaultCSS == null || alternativeCSS == null) {
            log.error("Unable to parse CSS");
            return 1;
        }

        CascadingStyleSheet outputCSS = new CascadingStyleSheet();

        log.info("Finding necessary alternative rules");

        Field m_aImportRulesField = CascadingStyleSheet.class.getDeclaredField("m_aImportRules");
        m_aImportRulesField.setAccessible(true);
        ICommonsList<CSSImportRule> defaultImportRules = (ICommonsList<CSSImportRule>) m_aImportRulesField
                .get(defaultCSS);
        ICommonsList<CSSImportRule> alternativeImportRules = (ICommonsList<CSSImportRule>) m_aImportRulesField
                .get(alternativeCSS);
        List<CSSImportRule> baseImportRules = alternativeImportRules.getCopyAsList();
        baseImportRules.removeAll(defaultImportRules.getCopyAsList());
        m_aImportRulesField.set(outputCSS, baseImportRules);

        Field m_aNamespaceRulesField = CascadingStyleSheet.class.getDeclaredField("m_aNamespaceRules");
        m_aNamespaceRulesField.setAccessible(true);
        ICommonsList<CSSNamespaceRule> defaultNamespaceRules = (ICommonsList<CSSNamespaceRule>) m_aNamespaceRulesField
                .get(defaultCSS);
        ICommonsList<CSSNamespaceRule> alternativeNamespaceRules = (ICommonsList<CSSNamespaceRule>) m_aNamespaceRulesField
                .get(alternativeCSS);
        List<CSSNamespaceRule> baseNamespaceRules = alternativeNamespaceRules.getCopyAsList();
        baseNamespaceRules.removeAll(defaultNamespaceRules.getCopyAsList());
        m_aNamespaceRulesField.set(outputCSS, baseNamespaceRules);

        Field m_aRulesField = CascadingStyleSheet.class.getSuperclass().getDeclaredField("m_aRules");
        m_aRulesField.setAccessible(true);
        ICommonsList<ICSSTopLevelRule> defaultRules = (ICommonsList<ICSSTopLevelRule>) m_aRulesField.get(defaultCSS);
        ICommonsList<ICSSTopLevelRule> alternativeRules = (ICommonsList<ICSSTopLevelRule>) m_aRulesField
                .get(alternativeCSS);
        List<ICSSTopLevelRule> baseRules = alternativeRules.getCopyAsList();
        baseRules.removeAll(defaultRules.getCopyAsList());
        m_aRulesField.set(outputCSS, baseRules);

        log.info("Attempting to save resultant CSS");

        try {
            CSSWriter Writer = new CSSWriter(new CSSWriterSettings(ECSSVersion.CSS30, false));
            Writer.setContentCharset(StandardCharsets.UTF_8.name());
            Writer.setHeaderText("This stylesheet was generated by cssThemeMerge\nMade by https://sebjo.se");
            SimpleFileIO.writeFile(outputFile, Writer.getCSSAsString(outputCSS), StandardCharsets.UTF_8);
        } catch (final Exception ex) {
            log.error("Unable to save final stylesheet");
        }

        log.info("Finished");
        return 0;
    }

    public static void main(String... args) {
        int exitCode = new CommandLine(new App()).execute(args);
        System.exit(exitCode);
    }
}
